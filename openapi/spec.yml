openapi: 3.1.0
info:
  title: Steadybit ActionKit API
  version: 1.0.0
  license:
    name: MIT
    identifier: MIT
consumes:
  - application/json
produces:
  - application/json
components:
  schemas:
    ActionList:
      title: Action List
      description: Lists all actions that the platform/agent could execute.
      type: object
      properties:
        actions:
          type: array
          items:
            $ref: '#/components/schemas/DescribingEndpointReference'
          uniqueItems: true
      required:
        - actions
    ActionKind:
      type: string
      enum:
        - attack
        - check
        - load_test
        - other
      description: >-
        Describes what kind of action this is. This is used to help users understand
        and classify the various runnable actions that are part of an experiment.
    ActionKitError:
      title: Error
      description: >-
        An enhanced version of RFC 7807 Problem Details for HTTP APIs compliant response body for error scenarios
      properties:
        status:
          description: >-
            * failed - The action has detected some failures, for example a failing test which has been implemented by the action. The action will be stopped, if this status is returned by the status endpoint.
            * errored - There was a technical error while executing the action. Will be marked as red in the platform. The action will be stopped, if this status is returned by the status endpoint.
          enum:
            - failed
            - errored
          type: string
          default: errored
        type:
          type: string
          description: A URI reference that identifies the problem type.
        title:
          type: string
          description: 'A short, human-readable summary of the problem type.'
        detail:
          type: string
          description: >-
            A human-readable explanation specific to this occurrence of the
            problem.
        instance:
          type: string
          description: >-
            A URI reference that identifies the specific occurrence of the
            problem.
      required:
        - title
    Messages:
      title: Messages
      description: Log-messages that will be passed to the platform (default agent log).
      type: array
      items:
        $ref: '#/components/schemas/Message'
    MessageFields:
      title: Message Fields
      description: >-
        Any kind of action specific fields that will be rendered in the platform tooltip of LogWidget
      type: object
      additionalProperties:
        type: string
    Message:
      title: Message
      description: Log-message that will be passed to the platform (default agent log).
      type: object
      properties:
        message:
          type: string
        type:
          type: string
          default: 'AGENT'
        level:
          type: string
          enum:
            - debug
            - info
            - warn
            - error
          default: info
        timestamp:
          type: string
          format: date-time
        timestampSource:
          $ref: '#/components/schemas/TimestampSource'
        fields:
          $ref: '#/components/schemas/MessageFields'
      required:
        - message
    TargetSelection:
      title: TargetSelection
      description: >-
        Used to specify various aspects of the target selection. If the action don't need a target selection, this field can be omitted.
      type: object
      properties:
        targetType:
          type: string
          description: >-
            What target type this action should be offered for. Matches the `id`
            field within `DescribeTargetTypeResponse` within DiscoveryKit.
        selectionTemplates:
          $ref: '#/components/schemas/TargetSelectionTemplates'
        quantityRestriction:
          type: string
          enum:
            - exactly_one
            - all
            - none
          description: >-
            How many targets should be selected by the user.
            Values: 
             * `exactly_one` - Exactly one target must be selected. The execution will fail if more than one target is selected.
             * `all` - All selected targets will be used. The ui will not show a percentage randomizer for the target selection.
             * `none` - Default. There are no restriction in place for the number of targets. The ui will show a percentage randomizer for the target selection.
        defaultBlastRadiusRandomizer:
          $ref: '#/components/schemas/BlastRadiusRandomizer'
        defaultSelection:
          type: string
          enum:
            - all
            - none
          description: >-
            The default selection of the targets in the UI if no query is provided by the user.
            * 'all' All targets will be selected by default
            * 'none' (default) No targets will be selected by default
        title:
          type: string
          description: >-
            The title of the target selection. This is optional and only required in special cases. The ui will show a default title if this field is not set.
      required:
        - targetType
    TargetSelectionTemplates:
      title: TargetSelectionTemplates
      description: Users that want to configure an action with a targetType need to define a target selection through the query UI or query language. Extensions can define selection templates to help users define such target selections.
      type: array
      items:
        $ref: '#/components/schemas/TargetSelectionTemplate'
    TargetSelectionTemplate:
      title: TargetSelectionTemplate
      type: object
      properties:
        label:
          type: string
          description: Human-readable short label.
          maxLength: 128
        description:
          type: string
          description: Longer target selection template description. For example, to explain the template's purpose.
          maxLength: 1024
        query:
          type: string
          description: |
            The target selection query is defined using Steadybit's query language. For example:
              aws.account="" AND aws.zone.id=""
            For more information about the query language, please inspect Steadybit's documentation:
              https://docs.steadybit.com/use-steadybit/query-language
          maxLength: 1024
      required:
        - label
        - query
    BlastRadiusRandomizer:
      type: object
      description: >-
        The default blast radius randomizer configuration for the action. (Default: 100 percent)
      properties:
        mode:
          type: string
          enum:
            - percentage
            - maximum
          description: >-
            The mode of the randomizer. If set to `percentage`, the platform will pick n percent of the selected targets. If set to `maximum`, the randomizer pick n targets.
        value:
          type: integer
          description: >-
            If the mode is set to `percentage`, the value is the percentage of the selected targets. If the mode is set to `maximum`, the value is the number of targets.
      required:
        - mode
        - value
    Widgets:
      title: Widgets
      description: >-
        Widgets that will be rendered in the experiment result view after an experiment has finished.
      type: array
      items:
        $ref: '#/components/schemas/Widget'
    Widget:
      title: Widget
      description: >-
        A widget that can be rendered in the experiment result view after an experiment has finished.
        Any of
          - `action_kit_api.StateOverTimeWidget`
          - `action_kit_api.LogWidget`
          - `action_kit_api.MarkdownWidget`
          - `action_kit_api.PredefinedWidget`
          - `action_kit_api.LineChartWidget`
      anyOf:
        - $ref: '#/components/schemas/StateOverTimeWidget'
        - $ref: '#/components/schemas/LogWidget'
        - $ref: '#/components/schemas/MarkdownWidget'
        - $ref: '#/components/schemas/PredefinedWidget'
        - $ref: '#/components/schemas/LineChartWidget'
    LogWidget:
      title: LogWidget
      description: >-
        A widget that shows log messages.
      type: object
      properties:
        type:
          description: >-
            The type of the widget. Needs to be set to `action_kit_api.ComSteadybitWidgetLog`.
          type: string
          enum: [ com.steadybit.widget.log ]
        title:
          description: >-
            The title of the widget. This will be displayed in the widget header.
          type: string
          maxLength: 128
        logType:
          description: >-
            The type of messages that should be displayed in the widget. Needs to match `type` in `action_kit_api.Message`.
          type: string
          maxLength: 128
      required:
        - type
        - logType
        - title
    MarkdownWidget:
      title: MarkdownWidget
      description: >-
        A widget that renders Markdown content.
      type: object
      properties:
        type:
          description: >-
            The type of the widget. Needs to be set to `action_kit_api.ComSteadybitWidgetMarkdown`.
          type: string
          enum: [ com.steadybit.widget.markdown ]
        title:
          description: >-
            The title of the widget. This will be displayed in the widget header.
          type: string
          maxLength: 128
        messageType:
          description: >-
            The type of messages that should be displayed in the widget. Needs to match `type` in `action_kit_api.Message`.
          type: string
          maxLength: 128
        append:
          type: boolean
          description: >-
            If set to `true`, the widget will append the content to the existing content of previous endpoint calls. For example, you can return some headings in the `start` call, append some progress information in the `status` calls and add a summary in the `stop` call.
            If set to `false`, the widget will only show the last submitted content batch, grouped by `timestamp`. Older content will be displayed, when clicking on the timeline in the run view. To improve the performance, you should only return messages if the content has changed compared to the previous batch.
      required:
        - type
        - title
        - messageType
        - append
    PredefinedWidget:
      title: PredefinedWidget
      description: >-
        The platform contains a set of hand crafted predefined widgets. This widget type allows to use one of them.
      type: object
      properties:
        type:
          description: >-
            The type of the widget. Needs to be set to `action_kit_api.ComSteadybitWidgetPredefined`.
          type: string
          enum: [ com.steadybit.widget.predefined ]
        predefinedWidgetId:
          type: string
          maxLength: 128
      required:
        - type
        - predefinedWidgetId
    LineChartWidget:
      title: LineChartWidget
      description: >-
        A widget that shows a line chart.
      type: object
      properties:
        type:
          description: >-
            The type of the widget. Needs to be set to `action_kit_api.ComSteadybitWidgetLineChart`.
          type: string
          enum: [ com.steadybit.widget.line_chart ]
        title:
          description: >-
            The title of the widget. This will be displayed in the widget header.
          type: string
          maxLength: 128
        identity:
          $ref: '#/components/schemas/LineChartWidgetIdentityConfig'
        grouping:
          $ref: '#/components/schemas/LineChartWidgetGroupingConfig'
        tooltip:
          $ref: '#/components/schemas/LineChartWidgetTooltipConfig'
      required:
        - type
        - title
        - identity
    LineChartWidgetIdentityConfig:
      title: LineChartWidgetIdentityConfig
      type: object
      properties:
        metricName:
          description: >-
            The name of the metrics that should be considered for this line chart.
          type: string
        from:
          description: >-
            The name of a metric field containing a unique identifier per desired line chart within the UI.
          type: string
        mode:
          description: >-
            If there are multiple values by evaluating `from`, how should the widgets be rendered?
             - `com.steadybit.widget.line_chart.identity_mode.select` - A single widget is rendered and the user can select the value that should be displayed in the widget.
             - `com.steadybit.widget.line_chart.identity_mode.widget-per-value` - A separate widget is rendered per given value.
          type: string
          enum:
            - com.steadybit.widget.line_chart.identity_mode.select
            - com.steadybit.widget.line_chart.identity_mode.widget-per-value
      required:
        - metricName
        - from
        - mode
    LineChartWidgetGroupingConfig:
      title: LineChartWidgetGroupingConfig
      description: >-
        Optional configuration to group some data points in the line chart. Groups can be colored and a summary can be shown in an Pie chart next to the line chart.
      type: object
      properties:
        showSummary:
          type: boolean
          description: >-
            If set to `true`, a pie chart will be shown next to the line chart. The pie chart will show the summary of the groups and can be used to filter data points in the line chart.
        groups:
          type: array
          description: >-
            A list of groups that should be displayed in the line chart. Each group can be colored and a matcher can be defined to match the data points that should be part of this group.
          items:
            $ref: '#/components/schemas/LineChartWidgetGroup'
      required:
        - groups
    LineChartWidgetGroup:
      title: LineChartWidgetGroup
      description: >-
        A group of data points in the line chart.
      type: object
      properties:
        title:
          description: >-
            The title of the group. This will be displayed in the tooltip and the pie chart summary of the widget
          type: string
        color:
          description: >-
            The color of the group. This will be used to color the matching data points in the line chart.
          type: string
          format: color
        matcher:
          $ref: '#/components/schemas/LineChartWidgetGroupMatcher'
      required:
        - title
        - color
        - matcher
    LineChartWidgetGroupMatcher:
      description: >-
        The matcher that should be used to match the data points that should be part of this group.
        Any of
         - `action_kit_api.LineChartWidgetGroupMatcherFallback`
         - `action_kit_api.LineChartWidgetGroupMatcherKeyEqualsValue`
         - `action_kit_api.LineChartWidgetGroupMatcherNotEmpty`
      anyOf:
        - $ref: '#/components/schemas/LineChartWidgetGroupMatcherFallback'
        - $ref: '#/components/schemas/LineChartWidgetGroupMatcherKeyEqualsValue'
        - $ref: '#/components/schemas/LineChartWidgetGroupMatcherNotEmpty'
    LineChartWidgetGroupMatcherFallback:
      description: >-
        A fallback matcher that will match all data points that are not matched by any other group.
      type: object
      properties:
        type:
          description: >-
            The type of the widget. Needs to be set to `action_kit_api.ComSteadybitWidgetLineChartGroupMatcherFallback`.
          type: string
          enum: [ com.steadybit.widget.line_chart.group_matcher_fallback ]
      required:
        - type
    LineChartWidgetGroupMatcherKeyEqualsValue:
      description: >-
        A matcher that will match all data points where the value of the specified key equals the specified value.
      type: object
      properties:
        type:
          description: >-
            The type of the widget. Needs to be set to `action_kit_api.ComSteadybitWidgetLineChartGroupMatcherKeyEqualsValue`.
          type: string
          enum: [ com.steadybit.widget.line_chart.group_matcher_key_equals_value ]
        key:
          type: string
        value:
          type: string
      required:
        - type
        - key
        - value
    LineChartWidgetGroupMatcherNotEmpty:
      description: >-
        A matcher that will match all data points where the value of the specified key is not empty.
      type: object
      properties:
        type:
          description: >-
            The type of the widget. Needs to be set to `action_kit_api.ComSteadybitWidgetLineChartGroupMatcherNotEmpty`.
          type: string
          enum: [ com.steadybit.widget.line_chart.group_matcher_not_empty ]
        key:
          type: string
      required:
        - type
        - key
    LineChartWidgetTooltipConfig:
      title: LineChartWidgetTooltipConfig
      type: object
      properties:
        metricValueUnit:
          description: >-
            Optional unit of the metric value that should be displayed in the tooltip.
          type: string
        metricValueTitle:
          description: >-
            Optional title of the metric value that should be displayed in the tooltip.
          type: string
        additionalContent:
          description: >-
            Additional content that should be displayed in the tooltip. This can be used to show additional information about the data points in the line chart.
          type: array
          items:
            $ref: '#/components/schemas/LineChartWidgetTooltipContent'
      required:
        - additionalContent
    LineChartWidgetTooltipContent:
      title: LineChartWidgetTooltipContent
      type: object
      properties:
        title:
          description: >-
            The title of the additional content. This will be displayed as caption for the value in the tooltip.
          type: string
        from:
          description: >-
            The name of a metric field containing the value for this additional content.
          type: string
        unit:
          description: >-
            Optional unit which should be added next to the value in the tooltip.
          type: string
      required:
        - title
        - from
    StateOverTimeWidget:
      title: StateOverTimeWidget
      description: >-
        A widget that shows a state of over time.
      type: object
      properties:
        type:
          description: >-
            The type of the widget. Needs to be set to `action_kit_api.ComSteadybitWidgetStateOverTime`.
          type: string
          enum: [ com.steadybit.widget.state_over_time ]
        title:
          description: >-
            The title of the widget. This will be displayed in the widget header.
          type: string
          maxLength: 128
        identity:
          $ref: '#/components/schemas/StateOverTimeWidgetIdentityConfig'
        label:
          $ref: '#/components/schemas/StateOverTimeWidgetLabelConfig'
        tooltip:
          $ref: '#/components/schemas/StateOverTimeWidgetTooltipConfig'
        url:
          $ref: '#/components/schemas/StateOverTimeWidgetUrlConfig'
        state:
          $ref: '#/components/schemas/StateOverTimeWidgetStateConfig'
        value:
          $ref: '#/components/schemas/StateOverTimeWidgetValueConfig'
      required:
        - type
        - title
        - identity
        - label
        - tooltip
        - state
    StateOverTimeWidgetIdentityConfig:
      title: StateOverTimeWidgetIdentityConfig
      type: object
      properties:
        from:
          description: >-
            The name of a metric field containing a unique identifier per desired chart row within the UI.
          type: string
      required:
        - from
    StateOverTimeWidgetLabelConfig:
      title: StateOverTimeWidgetLabelConfig
      type: object
      properties:
        from:
          description: >-
            The name of a metric field containing a human-readable label per desired chart row within the UI.
          type: string
      required:
        - from
    StateOverTimeWidgetTooltipConfig:
      title: StateOverTimeWidgetTooltipConfig
      type: object
      properties:
        from:
          description: >-
            The name of a metric field containing the current tooltip at any time.
          type: string
      required:
        - from
    StateOverTimeWidgetUrlConfig:
      title: StateOverTimeWidgetUrlConfig
      type: object
      properties:
        from:
          description: >-
            The name of a metric field containing a URL. When available, it causes a chart segment to turn into a hyperlink.
          type: string
    StateOverTimeWidgetStateConfig:
      title: StateOverTimeWidgetStateConfig
      type: object
      properties:
        from:
          description: >-
            The name of a metric field containing the current state at any time.
          type: string
      required:
        - from
    StateOverTimeWidgetValueConfig:
      title: StateOverTimeWidgetValueConfig
      type: object
      properties:
        hide:
          type: boolean
          description: Set to true to hide the metric value within the widget. This is useful when only the translated state information is relevant.
    Artifacts:
      title: Artifacts
      type: array
      items:
        $ref: '#/components/schemas/Artifact'
    Artifact:
      title: Artifact
      description: Actions may choose to provide artifacts (arbitrary files) that are later accessible by users when inspecting experiment execution details. This comes in handy to expose load test reports and similar data.
      type: object
      properties:
        label:
          type: string
          description: Human-readable label for the artifact. We recommend to include file extensions within the label for a better user-experience when downloading these artifacts, e.g., load_test_result.tar.gz.
          maxLength: 256
        data:
          type: string
          description: base64 encoded data
          # 5 MiB * 133% (to account for inefficiency of base64 encoding)
          maxLength: 6973030
      required:
        - label
        - data
    Metric:
      title: Metric
      description: Metrics can be exposed by actions. These metrics can then be leveraged by end-users to inspect system behavior and to optionally abort experiment execution when certain metrics are observed, i.e., metrics can act as (steady state) checks.
      type: object
      properties:
        timestamp:
          type: string
          description: Timestamp describing at which moment the value was observed.
          format: date-time
        timestampSource:
          $ref: '#/components/schemas/TimestampSource'
        name:
          type: string
          description: Metric name. You can alternatively encode the metric name as `__name__` within the metric property.
        metric:
          type: object
          description: >-
            Key/value pairs describing the metric. This type is modeled after Prometheus'
            data model, i.e., metric labels. You may encode the metric name as `__name__`
            similar to how Prometheus does it.
          additionalProperties:
            type: string
        value:
          type: number
          x-go-type: float64
      required:
        - timestamp
        - metric
        - value
    Metrics:
      title: Metrics
      type: array
      items:
        $ref: '#/components/schemas/Metric'
    MetricsConfiguration:
      title: Metrics Configuration
      type: object
      properties:
        query:
          $ref: '#/components/schemas/MetricsQueryConfiguration'
    MetricsQueryConfiguration:
      title: Metrics Query Configuration
      type: object
      properties:
        endpoint:
          $ref: '#/components/schemas/MutatingEndpointReferenceWithCallInterval'
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/ActionParameter'
          uniqueItems: true
      required:
        - endpoint
        - parameters
    ActionDescription:
      title: Action Description
      description: >-
        Provides details about a possible action, e.g., what configuration
        options it has, how to present it to end-users and how to trigger the
        action.
      type: object
      properties:
        id:
          type: string
          description: >-
            A technical ID that is used to uniquely identify this type of
            action. You will typically want to use something like
            `org.example.my-fancy-attack`.
        label:
          type: string
          description: A human-readable label for the action.
        icon:
          type: string
          description: >-
            An icon that is used to identify your action in the ui. Needs to be
            a data-uri containing an image.
          maxLength: 1000000
          pattern: '^data:.*$'
        version:
          type: string
          description: >-
            The version of the action. Remember to increase the value everytime
            you update the definitions. The platform will ignore any definition
            changes with the same action version. We do recommend usage of
            semver strings.
        description:
          type: string
          description: >-
            Description for end-users to help them understand what the action is
            doing.
        kind:
          $ref: '#/components/schemas/ActionKind'
        technology:
          type: string
          description: >-
            Used for categorization of the action within user interfaces.
            In most cases, this will be the technology that the extension is about to handle, for example `AWS`,
            `Kubernetes` or `Host` or any custom technology you are writing an extension for.
        category:
          type: string
          description: >-
            Used for categorization of the action within user interfaces.
            This is optional and mostly used as sub-category if certain actions should be grouped together.
        targetSelection:
          $ref: '#/components/schemas/TargetSelection'
        targetType:
          type: string
          deprecated: true
          x-deprecated-reason: >-
            Use `TargetSelection.targetType` instead.
        targetSelectionTemplates:
          allOf:
            - $ref: '#/components/schemas/TargetSelectionTemplates'
          deprecated: true
          x-deprecated-reason: >-
            Use `TargetSelection.selectionTemplates` instead.
        timeControl:
          $ref: '#/components/schemas/TimeControl'
        parameters:
          type: array
          description: >-
            Parameters that are used to configure the action. These parameters will be rendered in the ui and will be validated.
          items:
            $ref: '#/components/schemas/ActionParameter'
          uniqueItems: true
        additionalFlags:
          type: array
          description: >-
            Additional flags that are used to configure the action for specific cases:
              * `DISABLE_HEARTBEAT` - Disable the heartbeat between agent and platform for this action during execution
          items:
            type: string
            enum:
              - DISABLE_HEARTBEAT
        hint:
          $ref: '#/components/schemas/ActionHint'
        widgets:
          $ref: '#/components/schemas/Widgets'
        metrics:
          $ref: '#/components/schemas/MetricsConfiguration'
        prepare:
          $ref: '#/components/schemas/MutatingEndpointReference'
        start:
          $ref: '#/components/schemas/MutatingEndpointReference'
        status:
          $ref: '#/components/schemas/MutatingEndpointReferenceWithCallInterval'
        stop:
          $ref: '#/components/schemas/MutatingEndpointReference'
      required:
        - id
        - label
        - version
        - description
        - kind
        - timeControl
        - parameters
        - prepare
        - start
    ParameterOption:
      anyOf:
        - $ref: '#/components/schemas/ExplicitParameterOption'
        - $ref: '#/components/schemas/ParameterOptionsFromTargetAttribute'
    RestrictedEndpoint:
      type: object
      properties:
        name:
          type: string
          description: >-
            The name of the protected Endpoint. For reference/debugging purposes only.
        url:
          type: string
          description: >-
            The URL of the protected Endpoint.
        portMin:
          type: integer
          description: >-
            The minimum port number that is allowed to be used for the Endpoint.
          minimum: 0
          maximum: 65535
        portMax:
          type: integer
          description: >-
            The maximum port number that is allowed to be used for the Endpoint.
          minimum: 0
          maximum: 65535
        cidr:
          type: string
          description: >-
            A CIDR that is used to restrict the target selection to a specific
            network.
          pattern: '^([0-9]{1,3}\.){3}[0-9]{1,3}(/[0-9]{1,2})?$'
      required:
        - name
        - url
        - cidr
        - portMin
        - portMax
    ExplicitParameterOption:
      description: You can use an explicit/fixed parameter option for a known / finite set of options that never change.
      properties:
        label:
          type: string
          description: A human-readable label describing this option.
        value:
          type: string
          description: The technical value which will be passed to the action as part of the `config` object.
      required:
        - label
        - value
    ParameterOptionsFromTargetAttribute:
      description: A meta option that represents all target attribute values for the key defined through the attribute field.
      properties:
        attribute:
          type: string
          description: Target attribute key from which the possible parameter options are gathered.
      required:
        - attribute
    ActionHint:
      description: >-
        Hints are used to provide additional information to the user. They are rendered in the ui when the user is configuring the action.
      properties:
        type:
          type: string
          enum:
            - 'hint_info'
            - 'hint_warning'
          description: Will be used in the product UI to display the hint in a different color and with a different icon.
        content:
          type: string
          description: The actual hint text (can contain markdown). Will be displayed in the product UI when configuring the action.
      required:
        - type
        - content
    ActionParameter:
      properties:
        label:
          type: string
          description: A human-readable label for the action parameter.
        name:
          type: string
          description: >-
            The key under which the action parameter is stored. This key can
            then be found within the prepare request's config field.
        description:
          type: string
          description: >-
            Description for end-users to help them understand the action
            parameter.
        type:
          type: string
          enum:
            - string
            - 'string[]'
            - 'string_array'
            - integer
            - boolean
            - percentage
            - duration
            - file
            - key_value
            - url
            - textarea
            - separator
            - header
            - bitrate
            - stressng-workers
            - regex
            - target-selection
          description: >-
            What kind of value this parameter is capturing. The type selection
            influences the `config` passed as part of the `PrepareRequest`. It
            also results in improved user-interface elements.
        required:
          type: boolean
          description: Whether or not end-users need to specify a value for this parameter.
        advanced:
          type: boolean
          description: >-
            Whether this parameter should be placed under the expandable
            advanced section within the user interface.
        order:
          type: integer
          deprecated: true
          x-deprecated-reason: >-
            The position in the list will determine the order.
        minValue:
          type: integer
          description: >-
            The minimum value for this parameter. Only applicable for parameters of type `integer` and `percentage`.
        maxValue:
          type: integer
          description: >-
            The minimum value for this parameter. Only applicable for parameters of type `integer` and `percentage`.
        defaultValue:
          type: string
          description: >-
            A default value for this parameter. This value will be used if the
            user does not specify a value for this parameter.
        optionsOnly:
          type: boolean
          default: true
          description: >-
            Define if for a type = 'string' with options, if only the options should be allowed or also free text. Default is true.
        options:
          type: array
          description: >-
            Optional options for the `string`, `string[]` and `string_array` parameter types. Which result in suggestions for end-users.
            Any of:
             - `action_kit_api.ExplicitParameterOption`
             - `action_kit_api.ParameterOptionsFromTargetAttribute`
          items:
            $ref: '#/components/schemas/ParameterOption'
          uniqueItems: true
        acceptedFileTypes:
          type: array
          description: "Unique file type specifiers describing what type of files are accepted for parameters of type 'file'."
          items:
            type: string
          uniqueItems: true
        hint:
          $ref: '#/components/schemas/ActionHint'
        deprecated:
          type: boolean
          description: >-
            Whether or not this parameter is deprecated. Deprecated parameters
            will be hidden from the user interface when configuring a new step.
            Existing steps will still be able to use deprecated parameters.
            A deprecated parameter should not be required nor have a defaultValue.
        deprecationMessage:
          type: string
          description: >-
            A message that will be shown to the user when they are configuring
            the action. This could for example include a hint to use a replacement.
      required:
        - label
        - name
        - type
    Target:
      type: object
      description: The target on which to act on as identified by a discovery.
      properties:
        name:
          type: string
        attributes:
          type: object
          description: >-
            These attributes include detailed information about the target
            provided through the discovery. These attributes are typically used
            as additional parameters within the action implementation.
          additionalProperties:
            type: array
            items:
              type: string
      required:
        - name
        - attributes
    TimeControl:
      type: string
      enum:
        - instantaneous
        - internal
        - external
      description: >-
        Actions can either be an instantaneous event, e.g., the restart of a
        host, or an activity spanning over an unspecified duration. For
        those actions having a duration, we differentiate between
        internally, e.g., waiting for a deployment to finish, and
        externally, e.g., waiting for a user-specified time to pass,
        controlled durations.
    TimestampSource:
      type: string
      enum:
        - 'extension'
        - 'external'
      description: >-
        Source of the timestamp. This is useful when the timestamp is retrieved from some other system.
        If not specified or equals `extension` the agent will adjust the timestamp with an offset calculated from the response date header and the platform's current time.
    ExecutionContext:
      type: object
      description: >-
        The execution context contains information about the current execution
        of the action.
      properties:
        agentPid:
          type: integer
          description: >-
            The process ID of the agent that is executing the action.
        agentAwsAccountId:
          type: string
          description: >-
            The AWS account ID of the agent that is executing the action.
            This is only set when the action is executed on an AWS
            account
        restrictedEndpoints:
          type: array
          items:
            $ref: '#/components/schemas/RestrictedEndpoint'
          description: >-
            Endpoints that are used by the agent (e.g to communicate with extensions and platform). These Connections shall not be affected by actions / attacks.
        experimentKey:
          type: string
          description: >-
            The experiment key of the experiment that is currently being executed.
        experimentUri:
          type: string
          description: >-
            The experiment URI of the experiment that is currently being executed.
        executionId:
          type: integer
          description: >-
            The execution ID of the current execution.
        executionUri:
          type: string
          description: >-
            The execution URI of the current execution.
    ActionState:
      title: Action State
      description: >-
        Any kind of action specific state that will be passed to the next
        endpoints.
      type: object
      additionalProperties: true
    PrepareResult:
      type: object
      properties:
        state:
          $ref: '#/components/schemas/ActionState'
        error:
          $ref: '#/components/schemas/ActionKitError'
        messages:
          $ref: '#/components/schemas/Messages'
        artifacts:
          $ref: '#/components/schemas/Artifacts'
        metrics:
          $ref: '#/components/schemas/Metrics'
      required:
        - state
    StartResult:
      type: object
      properties:
        state:
          $ref: '#/components/schemas/ActionState'
        error:
          $ref: '#/components/schemas/ActionKitError'
        messages:
          $ref: '#/components/schemas/Messages'
        artifacts:
          $ref: '#/components/schemas/Artifacts'
        metrics:
          $ref: '#/components/schemas/Metrics'
    StatusResult:
      properties:
        completed:
          description: the agent will continue to poll the status endpoint as long as completed is false and no error is set
          type: boolean
        state:
          $ref: '#/components/schemas/ActionState'
        error:
          $ref: '#/components/schemas/ActionKitError'
        messages:
          $ref: '#/components/schemas/Messages'
        artifacts:
          $ref: '#/components/schemas/Artifacts'
        metrics:
          $ref: '#/components/schemas/Metrics'
      required:
        - completed
    StopResult:
      properties:
        error:
          $ref: '#/components/schemas/ActionKitError'
        messages:
          $ref: '#/components/schemas/Messages'
        artifacts:
          $ref: '#/components/schemas/Artifacts'
        metrics:
          $ref: '#/components/schemas/Metrics'
    QueryMetricsResult:
      properties:
        messages:
          $ref: '#/components/schemas/Messages'
        artifacts:
          $ref: '#/components/schemas/Artifacts'
        metrics:
          $ref: '#/components/schemas/Metrics'
    ReadHttpMethod:
      type: string
      enum:
        - GET
    DescribingEndpointReference:
      title: HTTP Endpoint Reference
      description: HTTP endpoint which the Steadybit platform/agent could communicate with.
      properties:
        path:
          description: Absolute path of the HTTP endpoint.
          type: string
          pattern: ^/.*$
        method:
          description: HTTP method to use when calling the HTTP endpoint.
          $ref: '#/components/schemas/ReadHttpMethod'
      required:
        - path
        - method
    MutatingHttpMethod:
      type: string
      enum:
        - POST
        - PUT
        - DELETE
    MutatingEndpointReference:
      title: HTTP Endpoint Reference
      description: HTTP endpoint which the Steadybit platform/agent could communicate with.
      properties:
        path:
          type: string
          description: Absolute path of the HTTP endpoint.
          pattern: ^/.*$
        method:
          description: HTTP method to use when calling the HTTP endpoint.
          $ref: '#/components/schemas/MutatingHttpMethod'
      required:
        - path
        - method
    MutatingEndpointReferenceWithCallInterval:
      title: HTTP Endpoint Reference
      description: HTTP endpoint which the Steadybit platform/agent could communicate with.
      allOf:
        - $ref: '#/components/schemas/MutatingEndpointReference'
        - type: object
          properties:
            callInterval:
              type: string
              pattern: ^\d+(ns|ms|s|m|h|d)$
              description: >-
                At what frequency should the state endpoint be called? Takes
                durations in the format of `100ms` or `10s`.
  requestBodies:
    QueryMetricsRequestBody:
      title: Query Metrics Request
      description: The HTTP request payload passed to the metric query endpoints. Multiple query executions happen for every action execution.
      content:
        application/json:
          schema:
            type: object
            properties:
              executionId:
                type: string
                format: string
                x-go-type: uuid.UUID
                x-go-type-import:
                  path: github.com/google/uuid
              timestamp:
                type: string
                format: date-time
                description: For what timestamp the metric values should be retrieved.
              config:
                type: object
                description: >-
                  The metric query configuration. This contains the end-user
                  configuration done for the action. Possible configuration
                  parameters are defined through the action description.
              target:
                $ref: '#/components/schemas/Target'
            required:
              - executionId
              - timestamp
              - config
    PrepareActionRequestBody:
      title: Prepare Action Request
      description: The HTTP request payload passed to the action prepare endpoints.
      content:
        application/json:
          schema:
            type: object
            properties:
              executionId:
                type: string
                format: string
                x-go-type: uuid.UUID
                x-go-type-import:
                  path: github.com/google/uuid
              config:
                type: object
                description: >-
                  The action configuration. This contains the end-user
                  configuration done for the action. Possible configuration
                  parameters are defined through the action description.
                additionalProperties: true
              target:
                $ref: '#/components/schemas/Target'
              executionContext:
                $ref: '#/components/schemas/ExecutionContext'
            required:
              - executionId
              - config
    StartActionRequestBody:
      title: Start Action Request
      description: The HTTP request payload passed to the start action endpoints.
      content:
        application/json:
          schema:
            type: object
            properties:
              executionId:
                type: string
                format: string
                x-go-type: uuid.UUID
                x-go-type-import:
                  path: github.com/google/uuid
              state:
                $ref: '#/components/schemas/ActionState'
            required:
              - executionId
              - state
    ActionStatusRequestBody:
      title: Action Status Request
      description: The HTTP request payload passed to the action status endpoints.
      content:
        application/json:
          schema:
            type: object
            properties:
              executionId:
                type: string
                format: string
                x-go-type: uuid.UUID
                x-go-type-import:
                  path: github.com/google/uuid
              state:
                $ref: '#/components/schemas/ActionState'
            required:
              - executionId
              - state
    StopActionRequestBody:
      title: Stop Action Request
      description: The HTTP request payload passed to the stop action endpoints.
      content:
        application/json:
          schema:
            type: object
            properties:
              executionId:
                type: string
                format: string
                x-go-type: uuid.UUID
                x-go-type-import:
                  path: github.com/google/uuid
              state:
                $ref: '#/components/schemas/ActionState'
            required:
              - executionId
              - state
  responses:
    ActionListResponse:
      title: Action List Response
      description: Response for the action list endpoint
      content:
        application/json:
          schema:
            anyOf:
              - $ref: '#/components/schemas/ActionList'
              - $ref: '#/components/schemas/ActionKitError'
    DescribeActionResponse:
      title: Describe Action Response
      description: Response for the describe action endpoint
      content:
        application/json:
          schema:
            anyOf:
              - $ref: '#/components/schemas/ActionDescription'
              - $ref: '#/components/schemas/ActionKitError'
    PrepareActionResponse:
      title: Prepare Action Response
      description: Response for the action preparation endpoint
      content:
        application/json:
          schema:
            anyOf:
              - $ref: '#/components/schemas/PrepareResult'
              - $ref: '#/components/schemas/ActionKitError'
    StartActionResponse:
      title: Start Action Response
      description: Response for the start action endpoint
      content:
        application/json:
          schema:
            anyOf:
              - $ref: '#/components/schemas/StartResult'
              - $ref: '#/components/schemas/ActionKitError'
    ActionStatusResponse:
      title: Action Status Response
      description: Response for the start action endpoint
      content:
        application/json:
          schema:
            anyOf:
              - $ref: '#/components/schemas/StatusResult'
              - $ref: '#/components/schemas/ActionKitError'
    StopActionResponse:
      title: Stop Action Response
      description: Response for the stop action endpoint
      content:
        application/json:
          schema:
            anyOf:
              - $ref: '#/components/schemas/StopResult'
              - $ref: '#/components/schemas/ActionKitError'
    QueryMetricsResponse:
      title: Query MetricsResponse
      description: Response for the metric query endpoint
      content:
        application/json:
          schema:
            anyOf:
              - $ref: '#/components/schemas/QueryMetricsResult'
              - $ref: '#/components/schemas/ActionKitError'
