openapi: 3.1.0
info:
  title: Steadybit ActionKit API
  version: 1.0.0
  license:
    name: MIT
    identifier: MIT
consumes:
  - application/json
produces:
  - application/json
components:
  schemas:
    ActionList:
      title: Action List
      description: Lists all actions that the platform/agent could execute.
      type: object
      properties:
        actions:
          type: array
          items:
            $ref: '#/components/schemas/DescribingEndpointReference'
          uniqueItems: true
      required:
        - actions
    ActionKitError:
      title: Error
      description: >-
        An enhanced version of RFC 7807 Problem Details for HTTP APIs compliant response body for error scenarios
      properties:
        status:
          description: >-
            * failed - The action has detected some failures, for example a failing test which has been implemented by the action. The action will be stopped, if this status is returned by the status endpoint.
            * errored - There was a technical error while executing the action. Will be marked as red in the platform. The action will be stopped, if this status is returned by the status endpoint.
          enum:
            - failed
            - errored
          type: string
          default: errored
        type:
          type: string
          description: A URI reference that identifies the problem type.
        title:
          type: string
          description: 'A short, human-readable summary of the problem type.'
        detail:
          type: string
          description: >-
            A human-readable explanation specific to this occurrence of the
            problem.
        instance:
          type: string
          description: >-
            A URI reference that identifies the specific occurrence of the
            problem.
      required:
        - title
    Messages:
      title: Messages
      description: Log-messages that will be passed to the platform (default agent log).
      type: array
      items:
        $ref: '#/components/schemas/Message'
    Message:
      title: Message
      description: Log-message that will be passed to the platform (default agent log).
      type: object
      properties:
        message:
          type: string
        type:
          type: string
          default: 'AGENT'
        level:
          type: string
          enum:
            - debug
            - info
            - warn
            - error
          default: info
      required:
        - message
    TargetSelectionTemplates:
      title: TargetSelectionTemplates
      type: array
      items:
        $ref: '#/components/schemas/TargetSelectionTemplate'
    TargetSelectionTemplate:
      title: TargetSelectionTemplate
      description: Users that want to configure an action with a targetType need to define a target selection through the query UI or query language. Extensions can define selection templates to help users define such target selections.
      type: object
      properties:
        label:
          type: string
          description: Human-readable short label.
          maxLength: 128
        description:
          type: string
          description: Longer target selection template description. For example, to explain the template's purpose.
          maxLength: 1024
        query:
          type: string
          description: |
            The target selection query is defined using Steadybit's query language. For example:
              aws.account="" AND aws.zone.id=""
            For more information about the query language, please inspect Steadybit's documentation:
              https://docs.steadybit.com/use-steadybit/query-language
          maxLength: 1024
      required:
        - label
        - query
    Widgets:
      title: Widgets
      type: array
      items:
        $ref: '#/components/schemas/Widget'
    Widget:
      title: Widget
      anyOf:
        - $ref: '#/components/schemas/StateOverTimeWidget'
        - $ref: '#/components/schemas/LogWidget'
        - $ref: '#/components/schemas/PredefinedWidget'
    LogWidget:
      title: LogWidget
      type: object
      properties:
        type:
          type: string
          enum: [com.steadybit.widget.log]
        title:
          type: string
          maxLength: 128
        logType:
          type: string
          maxLength: 128
      required:
        - type
        - logType
        - title
    PredefinedWidget:
      title: PredefinedWidget
      type: object
      properties:
        type:
          type: string
          enum: [com.steadybit.widget.predefined]
        predefinedWidgetId:
          type: string
          maxLength: 128
      required:
        - type
        - predefinedWidgetId
    StateOverTimeWidget:
      title: StateOverTimeWidget
      type: object
      properties:
        type:
          type: string
          enum: [com.steadybit.widget.state_over_time]
        title:
          type: string
          maxLength: 128
        identity:
          $ref: '#/components/schemas/StateOverTimeWidgetIdentityConfig'
        label:
          $ref: '#/components/schemas/StateOverTimeWidgetLabelConfig'
        tooltip:
          $ref: '#/components/schemas/StateOverTimeWidgetTooltipConfig'
        url:
          $ref: '#/components/schemas/StateOverTimeWidgetUrlConfig'
        state:
          $ref: '#/components/schemas/StateOverTimeWidgetStateConfig'
        value:
          $ref: '#/components/schemas/StateOverTimeWidgetValueConfig'
      required:
        - type
        - title
        - identity
        - label
        - tooltip
        - state
    StateOverTimeWidgetIdentityConfig:
      title: StateOverTimeWidgetIdentityConfig
      type: object
      properties:
        from:
          type: string
      required:
        - from
    StateOverTimeWidgetLabelConfig:
      title: StateOverTimeWidgetLabelConfig
      type: object
      properties:
        from:
          type: string
      required:
        - from
    StateOverTimeWidgetTooltipConfig:
      title: StateOverTimeWidgetTooltipConfig
      type: object
      properties:
        from:
          type: string
      required:
        - from
    StateOverTimeWidgetUrlConfig:
      title: StateOverTimeWidgetUrlConfig
      type: object
      properties:
        from:
          type: string
    StateOverTimeWidgetStateConfig:
      title: StateOverTimeWidgetStateConfig
      type: object
      properties:
        from:
          type: string
      required:
        - from
    StateOverTimeWidgetValueConfig:
      title: StateOverTimeWidgetValueConfig
      type: object
      properties:
        hide:
          type: boolean
          description: Set to true to hide the metric value within the widget. This is useful when only the translated state information is relevant.
    Artifacts:
      title: Artifacts
      type: array
      items:
        $ref: '#/components/schemas/Artifact'
    Artifact:
      title: Artifact
      description: Actions may choose to provide artifacts (arbitrary files) that are later accessible by users when inspecting experiment execution details. This comes in handy to expose load test reports and similar data.
      type: object
      properties:
        label:
          type: string
          description: Human-readable label for the artifact. We recommend to include file extensions within the label for a better user-experience when downloading these artifacts, e.g., load_test_result.tar.gz.
          maxLength: 256
        data:
          type: string
          description: base64 encoded data
          # 5 MiB * 133% (to account for inefficiency of base64 encoding)
          maxLength: 6973030
      required:
        - label
        - data
    Metric:
      title: Metric
      description: Metrics can be exposed by actions. These metrics can then be leveraged by end-users to inspect system behavior and to optionally abort experiment execution when certain metrics are observed, i.e., metrics can act as (steady state) checks.
      type: object
      properties:
        timestamp:
          type: string
          description: Timestamp describing at which moment the value was observed.
          format: date-time
        name:
          type: string
          description: Metric name. You can alternatively encode the metric name as `__name__` within the metric property.
        metric:
          type: object
          description: >-
            Key/value pairs describing the metric. This type is modeled after Prometheus'
            data model, i.e., metric labels. You may encode the metric name as `__name__`
            similar to how Prometheus does it.
          additionalProperties:
            type: string
        value:
          type: number
          x-go-type: float64
      required:
        - timestamp
        - metric
        - value
    Metrics:
      title: Metrics
      type: array
      items:
        $ref: '#/components/schemas/Metric'
    MetricsConfiguration:
      title: Metrics Configuration
      type: object
      properties:
        query:
          $ref: '#/components/schemas/MetricsQueryConfiguration'
    MetricsQueryConfiguration:
      title: Metrics Query Configuration
      type: object
      properties:
        endpoint:
          $ref: '#/components/schemas/MutatingEndpointReferenceWithCallInterval'
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/ActionParameter'
          uniqueItems: true
      required:
        - endpoint
        - parameters
    ActionDescription:
      title: Action Description
      description: >-
        Provides details about a possible action, e.g., what configuration
        options it has, how to present it to end-users and how to trigger the
        action.
      type: object
      properties:
        id:
          type: string
          description: >-
            A technical ID that is used to uniquely identify this type of
            action. You will typically want to use something like
            `org.example.my-fancy-attack`.
        label:
          type: string
          description: A human-readable label for the action.
        icon:
          type: string
          description: >-
            An icon that is used to identify your action in the ui. Needs to be
            a data-uri containing an image.
          maxLength: 1000000
          pattern: '^data:.*$'
        version:
          type: string
          description: >-
            The version of the action. Remember to increase the value everytime
            you update the definitions. The platform will ignore any definition
            changes with the same action version. We do recommend usage of
            semver strings.
        description:
          type: string
          description: >-
            Description for end-users to help them understand what the action is
            doing.
        kind:
          type: string
          enum:
            - attack
            - check
            - load_test
            - other
          description: >-
            Describes what kind of action this is. This is used to help users understand
            and classify the various runnable actions that are part of an experiment.
        category:
          type: string
          description: Used for categorization of the action within user interfaces.
        targetType:
          type: string
          description: >-
            What target type this action should be offered for. Matches the `id`
            field within `DescribeTargetTypeResponse` within DiscoveryKit.
        targetSelectionTemplates:
          $ref: '#/components/schemas/TargetSelectionTemplates'
        timeControl:
          type: string
          enum:
            - instantaneous
            - internal
            - external
          description: >-
            Actions can either be an instantaneous event, e.g., the restart of a
            host, or an activity spanning over an unspecified duration. For
            those actions having a duration, we differentiate between
            internally, e.g., waiting for a deployment to finish, and
            externally, e.g., waiting for a user-specified time to pass,
            controlled durations.
        parameters:
          type: array
          items:
            $ref: '#/components/schemas/ActionParameter'
          uniqueItems: true
        widgets:
          $ref: '#/components/schemas/Widgets'
        metrics:
          $ref: '#/components/schemas/MetricsConfiguration'
        prepare:
          $ref: '#/components/schemas/MutatingEndpointReference'
        start:
          $ref: '#/components/schemas/MutatingEndpointReference'
        status:
          $ref: '#/components/schemas/MutatingEndpointReferenceWithCallInterval'
        stop:
          $ref: '#/components/schemas/MutatingEndpointReference'
      required:
        - id
        - label
        - version
        - description
        - kind
        - timeControl
        - parameters
        - prepare
        - start
    ParameterOption:
      anyOf:
        - $ref: '#/components/schemas/ExplicitParameterOption'
        - $ref: '#/components/schemas/ParameterOptionsFromTargetAttribute'
    ExplicitParameterOption:
      description: You can use an explicit/fixed parameter option for a known / finite set of options that never change.
      properties:
        label:
          type: string
          description: A human-readable label describing this option.
        value:
          type: string
          description: The technical value which will be passed to the action as part of the `config` object.
      required:
        - label
        - value
    ParameterOptionsFromTargetAttribute:
      description: A meta option that represents all target attribute values for the key defined through the attribute field.
      properties:
        attribute:
          type: string
          description: Target attribute key from which the possible parameter options are gathered.
      required:
        - attribute
    ActionParameter:
      properties:
        label:
          type: string
          description: A human-readable label for the action parameter.
        name:
          type: string
          description: >-
            The key under which the action parameter is stored. This key can
            then be found within the prepare request's config field.
        description:
          type: string
          description: >-
            Description for end-users to help them understand the action
            parameter.
        type:
          type: string
          enum:
            - string
            - 'string[]'
            - 'string_array'
            - password
            - integer
            - boolean
            - percentage
            - duration
            - file
            - key_value
          description: >-
            What kind of value this parameter is capturing. The type selection
            influences the `config` passed as part of the `PrepareRequest`. It
            also results in improved user-interface elements.
        required:
          type: boolean
          description: Whether or not end-users need to specify a value for this parameter.
        advanced:
          type: boolean
          description: >-
            Whether this parameter should be placed under the expandable
            advanced section within the user interface.
        order:
          type: integer
          description: >-
            You can define this fields to order the parameters in the user
            interface. The lower the value, the higher the position.
        defaultValue:
          type: string
          description: >-
            A default value for this parameter. This value will be used if the
            user does not specify a value for this parameter.
        options:
          type: array
          description: Optional options for the `string`, `string[]` and `string_array` parameter types. Which result in suggestions for end-users.
          items:
            $ref: '#/components/schemas/ParameterOption'
          uniqueItems: true
        acceptedFileTypes:
          type: array
          description: "Unique file type specifiers describing what type of files are accepted for parameters of type 'file'."
          items:
            type: string
          uniqueItems: true
      required:
        - label
        - name
        - type
    Target:
      type: object
      description: The target on which to act on as identified by a discovery.
      properties:
        name:
          type: string
        attributes:
          type: object
          description: >-
            These attributes include detailed information about the target
            provided through the discovery. These attributes are typically used
            as additional parameters within the action implementation.
          additionalProperties:
            type: array
            items:
              type: string
      required:
        - name
        - attributes
    ActionState:
      title: Action State
      description: >-
        Any kind of action specific state that will be passed to the next
        endpoints.
      type: object
    PrepareResult:
      type: object
      properties:
        state:
          $ref: '#/components/schemas/ActionState'
        error:
          $ref: '#/components/schemas/ActionKitError'
        messages:
          $ref: '#/components/schemas/Messages'
        artifacts:
          $ref: '#/components/schemas/Artifacts'
        metrics:
          $ref: '#/components/schemas/Metrics'
      required:
        - state
    StartResult:
      type: object
      properties:
        state:
          $ref: '#/components/schemas/ActionState'
        error:
          $ref: '#/components/schemas/ActionKitError'
        messages:
          $ref: '#/components/schemas/Messages'
        artifacts:
          $ref: '#/components/schemas/Artifacts'
        metrics:
          $ref: '#/components/schemas/Metrics'
    StatusResult:
      properties:
        completed:
          description: the agent will continue to poll the status endpoint as long as completed is false
          type: boolean
        state:
          $ref: '#/components/schemas/ActionState'
        error:
          $ref: '#/components/schemas/ActionKitError'
        messages:
          $ref: '#/components/schemas/Messages'
        artifacts:
          $ref: '#/components/schemas/Artifacts'
        metrics:
          $ref: '#/components/schemas/Metrics'
      required:
        - completed
    StopResult:
      properties:
        error:
          $ref: '#/components/schemas/ActionKitError'
        messages:
          $ref: '#/components/schemas/Messages'
        artifacts:
          $ref: '#/components/schemas/Artifacts'
        metrics:
          $ref: '#/components/schemas/Metrics'
    QueryMetricsResult:
      properties:
        messages:
          $ref: '#/components/schemas/Messages'
        artifacts:
          $ref: '#/components/schemas/Artifacts'
        metrics:
          $ref: '#/components/schemas/Metrics'
    DescribingEndpointReference:
      title: HTTP Endpoint Reference
      description: HTTP endpoint which the Steadybit platform/agent could communicate with.
      properties:
        path:
          description: Absolute path of the HTTP endpoint.
          type: string
          pattern: ^/.*$
        method:
          description: HTTP method to use when calling the HTTP endpoint.
          type: string
          enum:
            - get
      required:
        - path
        - method
    MutatingHttpMethod:
      type: string
      enum:
        - post
        - put
        - delete
    MutatingEndpointReference:
      title: HTTP Endpoint Reference
      description: HTTP endpoint which the Steadybit platform/agent could communicate with.
      properties:
        path:
          type: string
          description: Absolute path of the HTTP endpoint.
          pattern: ^/.*$
        method:
          description: HTTP method to use when calling the HTTP endpoint.
          $ref: '#/components/schemas/MutatingHttpMethod'
      required:
        - path
        - method
    MutatingEndpointReferenceWithCallInterval:
      title: HTTP Endpoint Reference
      description: HTTP endpoint which the Steadybit platform/agent could communicate with.
      allOf:
        - $ref: '#/components/schemas/MutatingEndpointReference'
        - type: object
          properties:
            callInterval:
              type: string
              pattern: ^\d+(ns|ms|s|m|h|d)$
              description: >-
                At what frequency should the state endpoint be called? Takes
                durations in the format of `100ms` or `10s`.
  requestBodies:
    QueryMetricsRequestBody:
      title: Query Metrics Request
      description: The HTTP request payload passed to the metric query endpoints. Multiple query executions happen for every action execution.
      content:
        application/json:
          schema:
            type: object
            properties:
              executionId:
                type: string
                format: string
                x-go-type: uuid.UUID
                x-go-type-import:
                  name: uuid
                  path: github.com/google/uuid
              timestamp:
                type: string
                format: date-time
                description: For what timestamp the metric values should be retrieved.
              config:
                type: object
                description: >-
                  The metric query configuration. This contains the end-user
                  configuration done for the action. Possible configuration
                  parameters are defined through the action description.
              target:
                $ref: '#/components/schemas/Target'
            required:
              - executionId
              - timestamp
              - config
    PrepareActionRequestBody:
      title: Prepare Action Request
      description: The HTTP request payload passed to the action prepare endpoints.
      content:
        application/json:
          schema:
            type: object
            properties:
              executionId:
                type: string
                format: string
                x-go-type: uuid.UUID
                x-go-type-import:
                  name: uuid
                  path: github.com/google/uuid
              config:
                type: object
                description: >-
                  The action configuration. This contains the end-user
                  configuration done for the action. Possible configuration
                  parameters are defined through the action description.
              target:
                $ref: '#/components/schemas/Target'
            required:
              - executionId
              - config
    StartActionRequestBody:
      title: Start Action Request
      description: The HTTP request payload passed to the start action endpoints.
      content:
        application/json:
          schema:
            type: object
            properties:
              state:
                $ref: '#/components/schemas/ActionState'
            required:
              - state
    ActionStatusRequestBody:
      title: Action Status Request
      description: The HTTP request payload passed to the action status endpoints.
      content:
        application/json:
          schema:
            type: object
            properties:
              state:
                $ref: '#/components/schemas/ActionState'
            required:
              - state
    StopActionRequestBody:
      title: Stop Action Request
      description: The HTTP request payload passed to the stop action endpoints.
      content:
        application/json:
          schema:
            type: object
            properties:
              state:
                $ref: '#/components/schemas/ActionState'
            required:
              - state
  responses:
    ActionListResponse:
      title: Action List Response
      description: Response for the action list endpoint
      content:
        application/json:
          schema:
            anyOf:
              - $ref: '#/components/schemas/ActionList'
              - $ref: '#/components/schemas/ActionKitError'
    DescribeActionResponse:
      title: Describe Action Response
      description: Response for the describe action endpoint
      content:
        application/json:
          schema:
            anyOf:
              - $ref: '#/components/schemas/ActionDescription'
              - $ref: '#/components/schemas/ActionKitError'
    PrepareActionResponse:
      title: Prepare Action Response
      description: Response for the action preparation endpoint
      content:
        application/json:
          schema:
            anyOf:
              - $ref: '#/components/schemas/PrepareResult'
              - $ref: '#/components/schemas/ActionKitError'
    StartActionResponse:
      title: Start Action Response
      description: Response for the start action endpoint
      content:
        application/json:
          schema:
            anyOf:
              - $ref: '#/components/schemas/StartResult'
              - $ref: '#/components/schemas/ActionKitError'
    ActionStatusResponse:
      title: Action Status Response
      description: Response for the start action endpoint
      content:
        application/json:
          schema:
            anyOf:
              - $ref: '#/components/schemas/StatusResult'
              - $ref: '#/components/schemas/ActionKitError'
    StopActionResponse:
      title: Stop Action Response
      description: Response for the stop action endpoint
      content:
        application/json:
          schema:
            anyOf:
              - $ref: '#/components/schemas/StopResult'
              - $ref: '#/components/schemas/ActionKitError'
    QueryMetricsResponse:
      title: Query MetricsResponse
      description: Response for the metric query endpoint
      content:
        application/json:
          schema:
            anyOf:
              - $ref: '#/components/schemas/QueryMetricsResult'
              - $ref: '#/components/schemas/ActionKitError'