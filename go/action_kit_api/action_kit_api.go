// Package action_kit_api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package action_kit_api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/google/uuid"
	"github.com/oapi-codegen/runtime"
)

// Defines values for ActionDescriptionAdditionalFlags.
const (
	DISABLEHEARTBEAT ActionDescriptionAdditionalFlags = "DISABLE_HEARTBEAT"
)

// Defines values for ActionHintType.
const (
	HintInfo    ActionHintType = "hint_info"
	HintWarning ActionHintType = "hint_warning"
)

// Defines values for ActionKind.
const (
	Attack   ActionKind = "attack"
	Check    ActionKind = "check"
	LoadTest ActionKind = "load_test"
	Other    ActionKind = "other"
)

// Defines values for ActionKitErrorStatus.
const (
	Errored ActionKitErrorStatus = "errored"
	Failed  ActionKitErrorStatus = "failed"
)

// Defines values for ActionParameterType.
const (
	Bitrate         ActionParameterType = "bitrate"
	Boolean         ActionParameterType = "boolean"
	Duration        ActionParameterType = "duration"
	File            ActionParameterType = "file"
	Header          ActionParameterType = "header"
	Integer         ActionParameterType = "integer"
	KeyValue        ActionParameterType = "key_value"
	Percentage      ActionParameterType = "percentage"
	Regex           ActionParameterType = "regex"
	Separator       ActionParameterType = "separator"
	StressngWorkers ActionParameterType = "stressng-workers"
	String          ActionParameterType = "string"
	String1         ActionParameterType = "string[]"
	StringArray     ActionParameterType = "string_array"
	Textarea        ActionParameterType = "textarea"
	Url             ActionParameterType = "url"
)

// Defines values for LineChartWidgetType.
const (
	ComSteadybitWidgetLineChart LineChartWidgetType = "com.steadybit.widget.line_chart"
)

// Defines values for LogWidgetType.
const (
	ComSteadybitWidgetLog LogWidgetType = "com.steadybit.widget.log"
)

// Defines values for MarkdownWidgetType.
const (
	ComSteadybitWidgetMarkdown MarkdownWidgetType = "com.steadybit.widget.markdown"
)

// Defines values for MessageLevel.
const (
	Debug MessageLevel = "debug"
	Error MessageLevel = "error"
	Info  MessageLevel = "info"
	Warn  MessageLevel = "warn"
)

// Defines values for MutatingHttpMethod.
const (
	DELETE MutatingHttpMethod = "DELETE"
	POST   MutatingHttpMethod = "POST"
	PUT    MutatingHttpMethod = "PUT"
)

// Defines values for PredefinedWidgetType.
const (
	ComSteadybitWidgetPredefined PredefinedWidgetType = "com.steadybit.widget.predefined"
)

// Defines values for ReadHttpMethod.
const (
	GET ReadHttpMethod = "GET"
)

// Defines values for StateOverTimeWidgetType.
const (
	ComSteadybitWidgetStateOverTime StateOverTimeWidgetType = "com.steadybit.widget.state_over_time"
)

// Defines values for TargetSelectionQuantityRestriction.
const (
	All        TargetSelectionQuantityRestriction = "all"
	ExactlyOne TargetSelectionQuantityRestriction = "exactly_one"
	None       TargetSelectionQuantityRestriction = "none"
)

// Defines values for TimeControl.
const (
	TimeControlExternal      TimeControl = "external"
	TimeControlInstantaneous TimeControl = "instantaneous"
	TimeControlInternal      TimeControl = "internal"
)

// Defines values for TimestampSource.
const (
	TimestampSourceExtension TimestampSource = "extension"
	TimestampSourceExternal  TimestampSource = "external"
)

// ActionDescription Provides details about a possible action, e.g., what configuration options it has, how to present it to end-users and how to trigger the action.
type ActionDescription struct {
	// AdditionalFlags Additional flags that are used to configure the action for specific cases:
	//   * `DISABLE_HEARTBEAT` - Disable the heartbeat between agent and platform for this action during execution
	AdditionalFlags *[]ActionDescriptionAdditionalFlags `json:"additionalFlags,omitempty"`

	// Category Used for categorization of the action within user interfaces. This is optional and mostly used as sub-category if certain actions should be grouped together.
	Category *string `json:"category,omitempty"`

	// Description Description for end-users to help them understand what the action is doing.
	Description string `json:"description"`

	// Hint Hints are used to provide additional information to the user. They are rendered in the ui when the user is configuring the action.
	Hint *ActionHint `json:"hint,omitempty"`

	// Icon An icon that is used to identify your action in the ui. Needs to be a data-uri containing an image.
	Icon *string `json:"icon,omitempty"`

	// Id A technical ID that is used to uniquely identify this type of action. You will typically want to use something like `org.example.my-fancy-attack`.
	Id string `json:"id"`

	// Kind Describes what kind of action this is. This is used to help users understand and classify the various runnable actions that are part of an experiment.
	Kind ActionKind `json:"kind"`

	// Label A human-readable label for the action.
	Label   string                `json:"label"`
	Metrics *MetricsConfiguration `json:"metrics,omitempty"`

	// Parameters Parameters that are used to configure the action. These parameters will be rendered in the ui and will be validated.
	Parameters []ActionParameter `json:"parameters"`

	// Prepare HTTP endpoint which the Steadybit platform/agent could communicate with.
	Prepare MutatingEndpointReference `json:"prepare"`

	// Start HTTP endpoint which the Steadybit platform/agent could communicate with.
	Start MutatingEndpointReference `json:"start"`

	// Status HTTP endpoint which the Steadybit platform/agent could communicate with.
	Status *MutatingEndpointReferenceWithCallInterval `json:"status,omitempty"`

	// Stop HTTP endpoint which the Steadybit platform/agent could communicate with.
	Stop *MutatingEndpointReference `json:"stop,omitempty"`

	// TargetSelection Used to specify various aspects of the target selection. If the action don't need a target selection, this field can be omitted.
	TargetSelection *TargetSelection `json:"targetSelection,omitempty"`

	// TargetSelectionTemplates Deprecated: use `TargetSelection.selectionTemplates` instead.
	// Deprecated:
	TargetSelectionTemplates *TargetSelectionTemplates `json:"targetSelectionTemplates,omitempty"`

	// TargetType Deprecated: use `TargetSelection.targetType` instead.
	// Deprecated:
	TargetType *string `json:"targetType,omitempty"`

	// Technology Used for categorization of the action within user interfaces. In most cases, this will be the technology that the extension is about to handle, for example `AWS`, `Kubernetes` or `Host` or any custom technology you are writing an extension for.
	Technology *string `json:"technology,omitempty"`

	// TimeControl Actions can either be an instantaneous event, e.g., the restart of a host, or an activity spanning over an unspecified duration. For those actions having a duration, we differentiate between internally, e.g., waiting for a deployment to finish, and externally, e.g., waiting for a user-specified time to pass, controlled durations.
	TimeControl TimeControl `json:"timeControl"`

	// Version The version of the action. Remember to increase the value everytime you update the definitions. The platform will ignore any definition changes with the same action version. We do recommend usage of semver strings.
	Version string `json:"version"`

	// Widgets Widgets that will be rendered in the experiment result view after an experiment has finished.
	Widgets *Widgets `json:"widgets,omitempty"`
}

// ActionDescriptionAdditionalFlags defines model for ActionDescription.AdditionalFlags.
type ActionDescriptionAdditionalFlags string

// ActionHint Hints are used to provide additional information to the user. They are rendered in the ui when the user is configuring the action.
type ActionHint struct {
	// Content The actual hint text (can contain markdown). Will be displayed in the product UI when configuring the action.
	Content string `json:"content"`

	// Type Will be used in the product UI to display the hint in a different color and with a different icon.
	Type ActionHintType `json:"type"`
}

// ActionHintType Will be used in the product UI to display the hint in a different color and with a different icon.
type ActionHintType string

// ActionKind Describes what kind of action this is. This is used to help users understand and classify the various runnable actions that are part of an experiment.
type ActionKind string

// ActionKitError An enhanced version of RFC 7807 Problem Details for HTTP APIs compliant response body for error scenarios
type ActionKitError struct {
	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail *string `json:"detail,omitempty"`

	// Instance A URI reference that identifies the specific occurrence of the problem.
	Instance *string `json:"instance,omitempty"`

	// Status * failed - The action has detected some failures, for example a failing test which has been implemented by the action. The action will be stopped, if this status is returned by the status endpoint. * errored - There was a technical error while executing the action. Will be marked as red in the platform. The action will be stopped, if this status is returned by the status endpoint.
	Status *ActionKitErrorStatus `json:"status,omitempty"`

	// Title A short, human-readable summary of the problem type.
	Title string `json:"title"`

	// Type A URI reference that identifies the problem type.
	Type *string `json:"type,omitempty"`
}

// ActionKitErrorStatus * failed - The action has detected some failures, for example a failing test which has been implemented by the action. The action will be stopped, if this status is returned by the status endpoint. * errored - There was a technical error while executing the action. Will be marked as red in the platform. The action will be stopped, if this status is returned by the status endpoint.
type ActionKitErrorStatus string

// ActionList Lists all actions that the platform/agent could execute.
type ActionList struct {
	Actions []DescribingEndpointReference `json:"actions"`
}

// ActionParameter defines model for ActionParameter.
type ActionParameter struct {
	// AcceptedFileTypes Unique file type specifiers describing what type of files are accepted for parameters of type 'file'.
	AcceptedFileTypes *[]string `json:"acceptedFileTypes,omitempty"`

	// Advanced Whether this parameter should be placed under the expandable advanced section within the user interface.
	Advanced *bool `json:"advanced,omitempty"`

	// DefaultValue A default value for this parameter. This value will be used if the user does not specify a value for this parameter.
	DefaultValue *string `json:"defaultValue,omitempty"`

	// Deprecated Whether or not this parameter is deprecated. Deprecated parameters will be hidden from the user interface when configuring a new step. Existing steps will still be able to use deprecated parameters. A deprecated parameter should not be required nor have a defaultValue.
	Deprecated *bool `json:"deprecated,omitempty"`

	// DeprecationMessage A message that will be shown to the user when they are configuring the action. This could for example include a hint to use a replacement.
	DeprecationMessage *string `json:"deprecationMessage,omitempty"`

	// Description Description for end-users to help them understand the action parameter.
	Description *string `json:"description,omitempty"`

	// Hint Hints are used to provide additional information to the user. They are rendered in the ui when the user is configuring the action.
	Hint *ActionHint `json:"hint,omitempty"`

	// Label A human-readable label for the action parameter.
	Label string `json:"label"`

	// MaxValue The minimum value for this parameter. Only applicable for parameters of type `integer` and `percentage`.
	MaxValue *int `json:"maxValue,omitempty"`

	// MinValue The minimum value for this parameter. Only applicable for parameters of type `integer` and `percentage`.
	MinValue *int `json:"minValue,omitempty"`

	// Name The key under which the action parameter is stored. This key can then be found within the prepare request's config field.
	Name string `json:"name"`

	// Options Optional options for the `string`, `string[]` and `string_array` parameter types. Which result in suggestions for end-users. Any of:
	//  - `action_kit_api.ExplicitParameterOption`
	//  - `action_kit_api.ParameterOptionsFromTargetAttribute`
	Options *[]ParameterOption `json:"options,omitempty"`

	// OptionsOnly Define if for a type = 'string' with options, if only the options should be allowed or also free text. Default is true.
	OptionsOnly *bool `json:"optionsOnly,omitempty"`

	// Order You can define this fields to order the parameters in the user interface. The lower the value, the higher the position.
	Order *int `json:"order,omitempty"`

	// Required Whether or not end-users need to specify a value for this parameter.
	Required *bool `json:"required,omitempty"`

	// Type What kind of value this parameter is capturing. The type selection influences the `config` passed as part of the `PrepareRequest`. It also results in improved user-interface elements.
	Type ActionParameterType `json:"type"`
}

// ActionParameterType What kind of value this parameter is capturing. The type selection influences the `config` passed as part of the `PrepareRequest`. It also results in improved user-interface elements.
type ActionParameterType string

// ActionState Any kind of action specific state that will be passed to the next endpoints.
type ActionState map[string]interface{}

// Artifact Actions may choose to provide artifacts (arbitrary files) that are later accessible by users when inspecting experiment execution details. This comes in handy to expose load test reports and similar data.
type Artifact struct {
	// Data base64 encoded data
	Data string `json:"data"`

	// Label Human-readable label for the artifact. We recommend to include file extensions within the label for a better user-experience when downloading these artifacts, e.g., load_test_result.tar.gz.
	Label string `json:"label"`
}

// Artifacts defines model for Artifacts.
type Artifacts = []Artifact

// DescribingEndpointReference HTTP endpoint which the Steadybit platform/agent could communicate with.
type DescribingEndpointReference struct {
	Method ReadHttpMethod `json:"method"`

	// Path Absolute path of the HTTP endpoint.
	Path string `json:"path"`
}

// ExecutionContext The execution context contains information about the current execution of the action.
type ExecutionContext struct {
	// AgentAwsAccountId The AWS account ID of the agent that is executing the action. This is only set when the action is executed on an AWS account
	AgentAwsAccountId *string `json:"agentAwsAccountId,omitempty"`

	// AgentPid The process ID of the agent that is executing the action.
	AgentPid *int `json:"agentPid,omitempty"`

	// ExecutionId The execution ID of the current execution.
	ExecutionId *int `json:"executionId,omitempty"`

	// ExecutionUri The execution URI of the current execution.
	ExecutionUri *string `json:"executionUri,omitempty"`

	// ExperimentKey The experiment key of the experiment that is currently being executed.
	ExperimentKey *string `json:"experimentKey,omitempty"`

	// ExperimentUri The experiment URI of the experiment that is currently being executed.
	ExperimentUri *string `json:"experimentUri,omitempty"`

	// RestrictedEndpoints Endpoints that are used by the agent (e.g to communicate with extensions and platform). These Connections shall not be affected by actions / attacks.
	RestrictedEndpoints *[]RestrictedEndpoint `json:"restrictedEndpoints,omitempty"`
}

// ExplicitParameterOption You can use an explicit/fixed parameter option for a known / finite set of options that never change.
type ExplicitParameterOption struct {
	// Label A human-readable label describing this option.
	Label string `json:"label"`

	// Value The technical value which will be passed to the action as part of the `config` object.
	Value string `json:"value"`
}

// LineChartWidget A widget that shows a line chart.
type LineChartWidget struct {
	// Grouping Optional configuration to group some data points in the line chart. Groups can be colored and a summary can be shown in an Pie chart next to the line chart.
	Grouping *LineChartWidgetGroupingConfig `json:"grouping,omitempty"`
	Identity LineChartWidgetIdentityConfig  `json:"identity"`

	// Title The title of the widget. This will be displayed in the widget header.
	Title   string                        `json:"title"`
	Tooltip *LineChartWidgetTooltipConfig `json:"tooltip,omitempty"`

	// Type The type of the widget. Needs to be set to `action_kit_api.ComSteadybitWidgetLineChart`.
	Type LineChartWidgetType `json:"type"`
}

// LineChartWidgetType The type of the widget. Needs to be set to `action_kit_api.ComSteadybitWidgetLineChart`.
type LineChartWidgetType string

// LineChartWidgetGroup A group of data points in the line chart.
type LineChartWidgetGroup struct {
	// Color The color of the group. This will be used to color the matching data points in the line chart.
	Color string `json:"color"`

	// Fallback If `true`, this group will match all data points that are not matched by any other group. No matcher is required for this group.
	Fallback *bool `json:"fallback,omitempty"`

	// Matcher The matcher that should be used to match the data points that should be part of this group. Any of
	//  - `action_kit_api.LineChartWidgetGroupMatcherKeyEqualsValue`
	//  - `action_kit_api.LineChartWidgetGroupMatcherNotEmpty`
	Matcher *LineChartWidgetGroupMatcher `json:"matcher,omitempty"`

	// Title The title of the group. This will be displayed in the tooltip and the pie chart summary of the widget
	Title string `json:"title"`
}

// LineChartWidgetGroupMatcherFallback A fallback matcher that will match all data points that are not matched by any other matcher in the group.
type LineChartWidgetGroupMatcherFallback = map[string]interface{}

// LineChartWidgetGroupMatcherKeyEqualsValue A matcher that will match all data points where the value of the specified key equals the specified value.
type LineChartWidgetGroupMatcherKeyEqualsValue struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

// LineChartWidgetGroupMatcherNotEmpty A matcher that will match all data points where the value of the specified key is not empty.
type LineChartWidgetGroupMatcherNotEmpty struct {
	Key string `json:"key"`
}

// LineChartWidgetGroupingConfig Optional configuration to group some data points in the line chart. Groups can be colored and a summary can be shown in an Pie chart next to the line chart.
type LineChartWidgetGroupingConfig struct {
	// Groups A list of groups that should be displayed in the line chart. Each group can be colored and a matcher can be defined to match the data points that should be part of this group.
	Groups []LineChartWidgetGroup `json:"groups"`

	// ShowSummary If set to `true`, a pie chart will be shown next to the line chart. The pie chart will show the summary of the groups and can be used to filter data points in the line chart.
	ShowSummary *bool `json:"showSummary,omitempty"`
}

// LineChartWidgetIdentityConfig defines model for LineChartWidgetIdentityConfig.
type LineChartWidgetIdentityConfig struct {
	// From The name of a metric field containing a unique identifier per desired line chart within the UI.
	From string `json:"from"`

	// MetricName The name of the metrics that should be considered for this line chart.
	MetricName string `json:"metricName"`
}

// LineChartWidgetTooltipConfig defines model for LineChartWidgetTooltipConfig.
type LineChartWidgetTooltipConfig struct {
	// AdditionalContent Additional content that should be displayed in the tooltip. This can be used to show additional information about the data points in the line chart.
	AdditionalContent *[]LineChartWidgetTooltipContent `json:"additionalContent,omitempty"`

	// MetricValueTitle Optional title of the metric value that should be displayed in the tooltip.
	MetricValueTitle *string `json:"metricValueTitle,omitempty"`

	// MetricValueUnit Optional unit of the metric value that should be displayed in the tooltip.
	MetricValueUnit *string `json:"metricValueUnit,omitempty"`
}

// LineChartWidgetTooltipContent defines model for LineChartWidgetTooltipContent.
type LineChartWidgetTooltipContent struct {
	// From The name of a metric field containing the value for this additional content.
	From string `json:"from"`

	// Title The title of the additional content. This will be displayed as caption for the value in the tooltip.
	Title string `json:"title"`

	// Unit Optional unit which should be added next to the value in the tooltip.
	Unit *string `json:"unit,omitempty"`
}

// LogWidget A widget that shows log messages.
type LogWidget struct {
	// LogType The type of messages that should be displayed in the widget. Needs to match `type` in `action_kit_api.Message`.
	LogType string `json:"logType"`

	// Title The title of the widget. This will be displayed in the widget header.
	Title string `json:"title"`

	// Type The type of the widget. Needs to be set to `action_kit_api.ComSteadybitWidgetLog`.
	Type LogWidgetType `json:"type"`
}

// LogWidgetType The type of the widget. Needs to be set to `action_kit_api.ComSteadybitWidgetLog`.
type LogWidgetType string

// MarkdownWidget A widget that renders Markdown content.
type MarkdownWidget struct {
	// Append If set to `true`, the widget will append the content to the existing content of previous endpoint calls. For example, you can return some headings in the `start` call, append some progress information in the `status` calls and add a summary in the `stop` call. If set to `false`, the widget will only show the last submitted content batch, grouped by `timestamp`. Older content will be displayed, when clicking on the timeline in the run view. To improve the performance, you should only return messages if the content has changed compared to the previous batch.
	Append bool `json:"append"`

	// MessageType The type of messages that should be displayed in the widget. Needs to match `type` in `action_kit_api.Message`.
	MessageType string `json:"messageType"`

	// Title The title of the widget. This will be displayed in the widget header.
	Title string `json:"title"`

	// Type The type of the widget. Needs to be set to `action_kit_api.ComSteadybitWidgetMarkdown`.
	Type MarkdownWidgetType `json:"type"`
}

// MarkdownWidgetType The type of the widget. Needs to be set to `action_kit_api.ComSteadybitWidgetMarkdown`.
type MarkdownWidgetType string

// Message Log-message that will be passed to the platform (default agent log).
type Message struct {
	// Fields Any kind of action specific fields that will be rendered in the platform tooltip of LogWidget
	Fields    *MessageFields `json:"fields,omitempty"`
	Level     *MessageLevel  `json:"level,omitempty"`
	Message   string         `json:"message"`
	Timestamp *time.Time     `json:"timestamp,omitempty"`

	// TimestampSource Source of the timestamp. This is useful when the timestamp is retrieved from some other system. If not specified or equals `extension` the agent will adjust the timestamp with an offset calculated from the response date header and the platform's current time.
	TimestampSource *TimestampSource `json:"timestampSource,omitempty"`
	Type            *string          `json:"type,omitempty"`
}

// MessageLevel defines model for Message.Level.
type MessageLevel string

// MessageFields Any kind of action specific fields that will be rendered in the platform tooltip of LogWidget
type MessageFields map[string]string

// Messages Log-messages that will be passed to the platform (default agent log).
type Messages = []Message

// Metric Metrics can be exposed by actions. These metrics can then be leveraged by end-users to inspect system behavior and to optionally abort experiment execution when certain metrics are observed, i.e., metrics can act as (steady state) checks.
type Metric struct {
	// Metric Key/value pairs describing the metric. This type is modeled after Prometheus' data model, i.e., metric labels. You may encode the metric name as `__name__` similar to how Prometheus does it.
	Metric map[string]string `json:"metric"`

	// Name Metric name. You can alternatively encode the metric name as `__name__` within the metric property.
	Name *string `json:"name,omitempty"`

	// Timestamp Timestamp describing at which moment the value was observed.
	Timestamp time.Time `json:"timestamp"`

	// TimestampSource Source of the timestamp. This is useful when the timestamp is retrieved from some other system. If not specified or equals `extension` the agent will adjust the timestamp with an offset calculated from the response date header and the platform's current time.
	TimestampSource *TimestampSource `json:"timestampSource,omitempty"`
	Value           float64          `json:"value"`
}

// Metrics defines model for Metrics.
type Metrics = []Metric

// MetricsConfiguration defines model for MetricsConfiguration.
type MetricsConfiguration struct {
	Query *MetricsQueryConfiguration `json:"query,omitempty"`
}

// MetricsQueryConfiguration defines model for MetricsQueryConfiguration.
type MetricsQueryConfiguration struct {
	// Endpoint HTTP endpoint which the Steadybit platform/agent could communicate with.
	Endpoint   MutatingEndpointReferenceWithCallInterval `json:"endpoint"`
	Parameters []ActionParameter                         `json:"parameters"`
}

// MutatingEndpointReference HTTP endpoint which the Steadybit platform/agent could communicate with.
type MutatingEndpointReference struct {
	Method MutatingHttpMethod `json:"method"`

	// Path Absolute path of the HTTP endpoint.
	Path string `json:"path"`
}

// MutatingEndpointReferenceWithCallInterval defines model for MutatingEndpointReferenceWithCallInterval.
type MutatingEndpointReferenceWithCallInterval struct {
	// CallInterval At what frequency should the state endpoint be called? Takes durations in the format of `100ms` or `10s`.
	CallInterval *string            `json:"callInterval,omitempty"`
	Method       MutatingHttpMethod `json:"method"`

	// Path Absolute path of the HTTP endpoint.
	Path string `json:"path"`
}

// MutatingHttpMethod defines model for MutatingHttpMethod.
type MutatingHttpMethod string

// ParameterOptionsFromTargetAttribute A meta option that represents all target attribute values for the key defined through the attribute field.
type ParameterOptionsFromTargetAttribute struct {
	// Attribute Target attribute key from which the possible parameter options are gathered.
	Attribute string `json:"attribute"`
}

// PredefinedWidget The platform contains a set of hand crafted predefined widgets. This widget type allows to use one of them.
type PredefinedWidget struct {
	PredefinedWidgetId string `json:"predefinedWidgetId"`

	// Type The type of the widget. Needs to be set to `action_kit_api.ComSteadybitWidgetPredefined`.
	Type PredefinedWidgetType `json:"type"`
}

// PredefinedWidgetType The type of the widget. Needs to be set to `action_kit_api.ComSteadybitWidgetPredefined`.
type PredefinedWidgetType string

// PrepareResult defines model for PrepareResult.
type PrepareResult struct {
	Artifacts *Artifacts `json:"artifacts,omitempty"`

	// Error An enhanced version of RFC 7807 Problem Details for HTTP APIs compliant response body for error scenarios
	Error *ActionKitError `json:"error,omitempty"`

	// Messages Log-messages that will be passed to the platform (default agent log).
	Messages *Messages `json:"messages,omitempty"`
	Metrics  *Metrics  `json:"metrics,omitempty"`

	// State Any kind of action specific state that will be passed to the next endpoints.
	State ActionState `json:"state"`
}

// QueryMetricsResult defines model for QueryMetricsResult.
type QueryMetricsResult struct {
	Artifacts *Artifacts `json:"artifacts,omitempty"`

	// Messages Log-messages that will be passed to the platform (default agent log).
	Messages *Messages `json:"messages,omitempty"`
	Metrics  *Metrics  `json:"metrics,omitempty"`
}

// ReadHttpMethod defines model for ReadHttpMethod.
type ReadHttpMethod string

// RestrictedEndpoint defines model for RestrictedEndpoint.
type RestrictedEndpoint struct {
	// Cidr A CIDR that is used to restrict the target selection to a specific network.
	Cidr string `json:"cidr"`

	// Name The name of the protected Endpoint. For reference/debugging purposes only.
	Name string `json:"name"`

	// PortMax The maximum port number that is allowed to be used for the Endpoint.
	PortMax int `json:"portMax"`

	// PortMin The minimum port number that is allowed to be used for the Endpoint.
	PortMin int `json:"portMin"`

	// Url The URL of the protected Endpoint.
	Url string `json:"url"`
}

// StartResult defines model for StartResult.
type StartResult struct {
	Artifacts *Artifacts `json:"artifacts,omitempty"`

	// Error An enhanced version of RFC 7807 Problem Details for HTTP APIs compliant response body for error scenarios
	Error *ActionKitError `json:"error,omitempty"`

	// Messages Log-messages that will be passed to the platform (default agent log).
	Messages *Messages `json:"messages,omitempty"`
	Metrics  *Metrics  `json:"metrics,omitempty"`

	// State Any kind of action specific state that will be passed to the next endpoints.
	State *ActionState `json:"state,omitempty"`
}

// StateOverTimeWidget A widget that shows a state of over time.
type StateOverTimeWidget struct {
	Identity StateOverTimeWidgetIdentityConfig `json:"identity"`
	Label    StateOverTimeWidgetLabelConfig    `json:"label"`
	State    StateOverTimeWidgetStateConfig    `json:"state"`

	// Title The title of the widget. This will be displayed in the widget header.
	Title   string                           `json:"title"`
	Tooltip StateOverTimeWidgetTooltipConfig `json:"tooltip"`

	// Type The type of the widget. Needs to be set to `action_kit_api.ComSteadybitWidgetStateOverTime`.
	Type  StateOverTimeWidgetType         `json:"type"`
	Url   *StateOverTimeWidgetUrlConfig   `json:"url,omitempty"`
	Value *StateOverTimeWidgetValueConfig `json:"value,omitempty"`
}

// StateOverTimeWidgetType The type of the widget. Needs to be set to `action_kit_api.ComSteadybitWidgetStateOverTime`.
type StateOverTimeWidgetType string

// StateOverTimeWidgetIdentityConfig defines model for StateOverTimeWidgetIdentityConfig.
type StateOverTimeWidgetIdentityConfig struct {
	// From The name of a metric field containing a unique identifier per desired chart row within the UI.
	From string `json:"from"`
}

// StateOverTimeWidgetLabelConfig defines model for StateOverTimeWidgetLabelConfig.
type StateOverTimeWidgetLabelConfig struct {
	// From The name of a metric field containing a human-readable label per desired chart row within the UI.
	From string `json:"from"`
}

// StateOverTimeWidgetStateConfig defines model for StateOverTimeWidgetStateConfig.
type StateOverTimeWidgetStateConfig struct {
	// From The name of a metric field containing the current state at any time.
	From string `json:"from"`
}

// StateOverTimeWidgetTooltipConfig defines model for StateOverTimeWidgetTooltipConfig.
type StateOverTimeWidgetTooltipConfig struct {
	// From The name of a metric field containing the current tooltip at any time.
	From string `json:"from"`
}

// StateOverTimeWidgetUrlConfig defines model for StateOverTimeWidgetUrlConfig.
type StateOverTimeWidgetUrlConfig struct {
	// From The name of a metric field containing a URL. When available, it causes a chart segment to turn into a hyperlink.
	From *string `json:"from,omitempty"`
}

// StateOverTimeWidgetValueConfig defines model for StateOverTimeWidgetValueConfig.
type StateOverTimeWidgetValueConfig struct {
	// Hide Set to true to hide the metric value within the widget. This is useful when only the translated state information is relevant.
	Hide *bool `json:"hide,omitempty"`
}

// StatusResult defines model for StatusResult.
type StatusResult struct {
	Artifacts *Artifacts `json:"artifacts,omitempty"`

	// Completed the agent will continue to poll the status endpoint as long as completed is false and no error is set
	Completed bool `json:"completed"`

	// Error An enhanced version of RFC 7807 Problem Details for HTTP APIs compliant response body for error scenarios
	Error *ActionKitError `json:"error,omitempty"`

	// Messages Log-messages that will be passed to the platform (default agent log).
	Messages *Messages `json:"messages,omitempty"`
	Metrics  *Metrics  `json:"metrics,omitempty"`

	// State Any kind of action specific state that will be passed to the next endpoints.
	State *ActionState `json:"state,omitempty"`
}

// StopResult defines model for StopResult.
type StopResult struct {
	Artifacts *Artifacts `json:"artifacts,omitempty"`

	// Error An enhanced version of RFC 7807 Problem Details for HTTP APIs compliant response body for error scenarios
	Error *ActionKitError `json:"error,omitempty"`

	// Messages Log-messages that will be passed to the platform (default agent log).
	Messages *Messages `json:"messages,omitempty"`
	Metrics  *Metrics  `json:"metrics,omitempty"`
}

// Target The target on which to act on as identified by a discovery.
type Target struct {
	// Attributes These attributes include detailed information about the target provided through the discovery. These attributes are typically used as additional parameters within the action implementation.
	Attributes map[string][]string `json:"attributes"`
	Name       string              `json:"name"`
}

// TargetSelection Used to specify various aspects of the target selection. If the action don't need a target selection, this field can be omitted.
type TargetSelection struct {
	// QuantityRestriction How many targets should be selected by the user. Values:
	//  * `exactly_one` - Exactly one target must be selected. The execution will fail if more than one target is selected.
	//  * `all` - All selected targets will be used. The ui will not show a percentage randomizer for the target selection.
	//  * `none` - Default. There are no restriction in place for the number of targets. The ui will show a percentage randomizer for the target selection.
	QuantityRestriction *TargetSelectionQuantityRestriction `json:"quantityRestriction,omitempty"`

	// SelectionTemplates Users that want to configure an action with a targetType need to define a target selection through the query UI or query language. Extensions can define selection templates to help users define such target selections.
	SelectionTemplates *TargetSelectionTemplates `json:"selectionTemplates,omitempty"`

	// TargetType What target type this action should be offered for. Matches the `id` field within `DescribeTargetTypeResponse` within DiscoveryKit.
	TargetType string `json:"targetType"`
}

// TargetSelectionQuantityRestriction How many targets should be selected by the user. Values:
//   - `exactly_one` - Exactly one target must be selected. The execution will fail if more than one target is selected.
//   - `all` - All selected targets will be used. The ui will not show a percentage randomizer for the target selection.
//   - `none` - Default. There are no restriction in place for the number of targets. The ui will show a percentage randomizer for the target selection.
type TargetSelectionQuantityRestriction string

// TargetSelectionTemplate defines model for TargetSelectionTemplate.
type TargetSelectionTemplate struct {
	// Description Longer target selection template description. For example, to explain the template's purpose.
	Description *string `json:"description,omitempty"`

	// Label Human-readable short label.
	Label string `json:"label"`

	// Query The target selection query is defined using Steadybit's query language. For example:
	//   aws.account="" AND aws.zone.id=""
	// For more information about the query language, please inspect Steadybit's documentation:
	//   https://docs.steadybit.com/use-steadybit/query-language
	Query string `json:"query"`
}

// TargetSelectionTemplates Users that want to configure an action with a targetType need to define a target selection through the query UI or query language. Extensions can define selection templates to help users define such target selections.
type TargetSelectionTemplates = []TargetSelectionTemplate

// TimeControl Actions can either be an instantaneous event, e.g., the restart of a host, or an activity spanning over an unspecified duration. For those actions having a duration, we differentiate between internally, e.g., waiting for a deployment to finish, and externally, e.g., waiting for a user-specified time to pass, controlled durations.
type TimeControl string

// TimestampSource Source of the timestamp. This is useful when the timestamp is retrieved from some other system. If not specified or equals `extension` the agent will adjust the timestamp with an offset calculated from the response date header and the platform's current time.
type TimestampSource string

// Widgets Widgets that will be rendered in the experiment result view after an experiment has finished.
type Widgets = []Widget

// ActionListResponse defines model for ActionListResponse.
type ActionListResponse struct {
	union json.RawMessage
}

// ActionStatusResponse defines model for ActionStatusResponse.
type ActionStatusResponse struct {
	union json.RawMessage
}

// DescribeActionResponse defines model for DescribeActionResponse.
type DescribeActionResponse struct {
	union json.RawMessage
}

// PrepareActionResponse defines model for PrepareActionResponse.
type PrepareActionResponse struct {
	union json.RawMessage
}

// QueryMetricsResponse defines model for QueryMetricsResponse.
type QueryMetricsResponse struct {
	union json.RawMessage
}

// StartActionResponse defines model for StartActionResponse.
type StartActionResponse struct {
	union json.RawMessage
}

// StopActionResponse defines model for StopActionResponse.
type StopActionResponse struct {
	union json.RawMessage
}

// ActionStatusRequestBody defines model for ActionStatusRequestBody.
type ActionStatusRequestBody struct {
	ExecutionId uuid.UUID `json:"executionId"`

	// State Any kind of action specific state that will be passed to the next endpoints.
	State ActionState `json:"state"`
}

// PrepareActionRequestBody defines model for PrepareActionRequestBody.
type PrepareActionRequestBody struct {
	// Config The action configuration. This contains the end-user configuration done for the action. Possible configuration parameters are defined through the action description.
	Config map[string]interface{} `json:"config"`

	// ExecutionContext The execution context contains information about the current execution of the action.
	ExecutionContext *ExecutionContext `json:"executionContext,omitempty"`
	ExecutionId      uuid.UUID         `json:"executionId"`

	// Target The target on which to act on as identified by a discovery.
	Target *Target `json:"target,omitempty"`
}

// QueryMetricsRequestBody defines model for QueryMetricsRequestBody.
type QueryMetricsRequestBody struct {
	// Config The metric query configuration. This contains the end-user configuration done for the action. Possible configuration parameters are defined through the action description.
	Config      map[string]interface{} `json:"config"`
	ExecutionId uuid.UUID              `json:"executionId"`

	// Target The target on which to act on as identified by a discovery.
	Target *Target `json:"target,omitempty"`

	// Timestamp For what timestamp the metric values should be retrieved.
	Timestamp time.Time `json:"timestamp"`
}

// StartActionRequestBody defines model for StartActionRequestBody.
type StartActionRequestBody struct {
	ExecutionId uuid.UUID `json:"executionId"`

	// State Any kind of action specific state that will be passed to the next endpoints.
	State ActionState `json:"state"`
}

// StopActionRequestBody defines model for StopActionRequestBody.
type StopActionRequestBody struct {
	ExecutionId uuid.UUID `json:"executionId"`

	// State Any kind of action specific state that will be passed to the next endpoints.
	State ActionState `json:"state"`
}

// AsActionList returns the union data inside the ActionListResponse as a ActionList
func (t ActionListResponse) AsActionList() (ActionList, error) {
	var body ActionList
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActionList overwrites any union data inside the ActionListResponse as the provided ActionList
func (t *ActionListResponse) FromActionList(v ActionList) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActionList performs a merge with any union data inside the ActionListResponse, using the provided ActionList
func (t *ActionListResponse) MergeActionList(v ActionList) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsActionKitError returns the union data inside the ActionListResponse as a ActionKitError
func (t ActionListResponse) AsActionKitError() (ActionKitError, error) {
	var body ActionKitError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActionKitError overwrites any union data inside the ActionListResponse as the provided ActionKitError
func (t *ActionListResponse) FromActionKitError(v ActionKitError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActionKitError performs a merge with any union data inside the ActionListResponse, using the provided ActionKitError
func (t *ActionListResponse) MergeActionKitError(v ActionKitError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ActionListResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ActionListResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStatusResult returns the union data inside the ActionStatusResponse as a StatusResult
func (t ActionStatusResponse) AsStatusResult() (StatusResult, error) {
	var body StatusResult
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStatusResult overwrites any union data inside the ActionStatusResponse as the provided StatusResult
func (t *ActionStatusResponse) FromStatusResult(v StatusResult) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStatusResult performs a merge with any union data inside the ActionStatusResponse, using the provided StatusResult
func (t *ActionStatusResponse) MergeStatusResult(v StatusResult) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsActionKitError returns the union data inside the ActionStatusResponse as a ActionKitError
func (t ActionStatusResponse) AsActionKitError() (ActionKitError, error) {
	var body ActionKitError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActionKitError overwrites any union data inside the ActionStatusResponse as the provided ActionKitError
func (t *ActionStatusResponse) FromActionKitError(v ActionKitError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActionKitError performs a merge with any union data inside the ActionStatusResponse, using the provided ActionKitError
func (t *ActionStatusResponse) MergeActionKitError(v ActionKitError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ActionStatusResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ActionStatusResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsActionDescription returns the union data inside the DescribeActionResponse as a ActionDescription
func (t DescribeActionResponse) AsActionDescription() (ActionDescription, error) {
	var body ActionDescription
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActionDescription overwrites any union data inside the DescribeActionResponse as the provided ActionDescription
func (t *DescribeActionResponse) FromActionDescription(v ActionDescription) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActionDescription performs a merge with any union data inside the DescribeActionResponse, using the provided ActionDescription
func (t *DescribeActionResponse) MergeActionDescription(v ActionDescription) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsActionKitError returns the union data inside the DescribeActionResponse as a ActionKitError
func (t DescribeActionResponse) AsActionKitError() (ActionKitError, error) {
	var body ActionKitError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActionKitError overwrites any union data inside the DescribeActionResponse as the provided ActionKitError
func (t *DescribeActionResponse) FromActionKitError(v ActionKitError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActionKitError performs a merge with any union data inside the DescribeActionResponse, using the provided ActionKitError
func (t *DescribeActionResponse) MergeActionKitError(v ActionKitError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t DescribeActionResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *DescribeActionResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPrepareResult returns the union data inside the PrepareActionResponse as a PrepareResult
func (t PrepareActionResponse) AsPrepareResult() (PrepareResult, error) {
	var body PrepareResult
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPrepareResult overwrites any union data inside the PrepareActionResponse as the provided PrepareResult
func (t *PrepareActionResponse) FromPrepareResult(v PrepareResult) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePrepareResult performs a merge with any union data inside the PrepareActionResponse, using the provided PrepareResult
func (t *PrepareActionResponse) MergePrepareResult(v PrepareResult) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsActionKitError returns the union data inside the PrepareActionResponse as a ActionKitError
func (t PrepareActionResponse) AsActionKitError() (ActionKitError, error) {
	var body ActionKitError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActionKitError overwrites any union data inside the PrepareActionResponse as the provided ActionKitError
func (t *PrepareActionResponse) FromActionKitError(v ActionKitError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActionKitError performs a merge with any union data inside the PrepareActionResponse, using the provided ActionKitError
func (t *PrepareActionResponse) MergeActionKitError(v ActionKitError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PrepareActionResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PrepareActionResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsQueryMetricsResult returns the union data inside the QueryMetricsResponse as a QueryMetricsResult
func (t QueryMetricsResponse) AsQueryMetricsResult() (QueryMetricsResult, error) {
	var body QueryMetricsResult
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromQueryMetricsResult overwrites any union data inside the QueryMetricsResponse as the provided QueryMetricsResult
func (t *QueryMetricsResponse) FromQueryMetricsResult(v QueryMetricsResult) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeQueryMetricsResult performs a merge with any union data inside the QueryMetricsResponse, using the provided QueryMetricsResult
func (t *QueryMetricsResponse) MergeQueryMetricsResult(v QueryMetricsResult) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsActionKitError returns the union data inside the QueryMetricsResponse as a ActionKitError
func (t QueryMetricsResponse) AsActionKitError() (ActionKitError, error) {
	var body ActionKitError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActionKitError overwrites any union data inside the QueryMetricsResponse as the provided ActionKitError
func (t *QueryMetricsResponse) FromActionKitError(v ActionKitError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActionKitError performs a merge with any union data inside the QueryMetricsResponse, using the provided ActionKitError
func (t *QueryMetricsResponse) MergeActionKitError(v ActionKitError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t QueryMetricsResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *QueryMetricsResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStartResult returns the union data inside the StartActionResponse as a StartResult
func (t StartActionResponse) AsStartResult() (StartResult, error) {
	var body StartResult
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStartResult overwrites any union data inside the StartActionResponse as the provided StartResult
func (t *StartActionResponse) FromStartResult(v StartResult) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStartResult performs a merge with any union data inside the StartActionResponse, using the provided StartResult
func (t *StartActionResponse) MergeStartResult(v StartResult) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsActionKitError returns the union data inside the StartActionResponse as a ActionKitError
func (t StartActionResponse) AsActionKitError() (ActionKitError, error) {
	var body ActionKitError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActionKitError overwrites any union data inside the StartActionResponse as the provided ActionKitError
func (t *StartActionResponse) FromActionKitError(v ActionKitError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActionKitError performs a merge with any union data inside the StartActionResponse, using the provided ActionKitError
func (t *StartActionResponse) MergeActionKitError(v ActionKitError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StartActionResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StartActionResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsStopResult returns the union data inside the StopActionResponse as a StopResult
func (t StopActionResponse) AsStopResult() (StopResult, error) {
	var body StopResult
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromStopResult overwrites any union data inside the StopActionResponse as the provided StopResult
func (t *StopActionResponse) FromStopResult(v StopResult) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeStopResult performs a merge with any union data inside the StopActionResponse, using the provided StopResult
func (t *StopActionResponse) MergeStopResult(v StopResult) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsActionKitError returns the union data inside the StopActionResponse as a ActionKitError
func (t StopActionResponse) AsActionKitError() (ActionKitError, error) {
	var body ActionKitError
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromActionKitError overwrites any union data inside the StopActionResponse as the provided ActionKitError
func (t *StopActionResponse) FromActionKitError(v ActionKitError) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeActionKitError performs a merge with any union data inside the StopActionResponse, using the provided ActionKitError
func (t *StopActionResponse) MergeActionKitError(v ActionKitError) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t StopActionResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *StopActionResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
